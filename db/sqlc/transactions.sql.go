// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: transactions.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  id_user,
  total_value,
  category,
  description,
  is_expense
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id_transaction, id_user, transactions_at, total_value, category, description, is_expense
`

type CreateTransactionParams struct {
	IDUser      int64  `json:"id_user"`
	TotalValue  int64  `json:"total_value"`
	Category    string `json:"category"`
	Description string `json:"description"`
	IsExpense   bool   `json:"is_expense"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.IDUser,
		arg.TotalValue,
		arg.Category,
		arg.Description,
		arg.IsExpense,
	)
	var i Transaction
	err := row.Scan(
		&i.IDTransaction,
		&i.IDUser,
		&i.TransactionsAt,
		&i.TotalValue,
		&i.Category,
		&i.Description,
		&i.IsExpense,
	)
	return i, err
}

const createTransactionDetail = `-- name: CreateTransactionDetail :one
INSERT INTO transaction_detail (
  id_transaction,
  description,
  quantity,
  unit_value
) VALUES (
  $1, $2, $3, $4
) RETURNING id_transaction_detail, id_transaction, description, quantity, unit_value, transaction_detail_at
`

type CreateTransactionDetailParams struct {
	IDTransaction int64          `json:"id_transaction"`
	Description   sql.NullString `json:"description"`
	Quantity      sql.NullInt32  `json:"quantity"`
	UnitValue     sql.NullInt64  `json:"unit_value"`
}

func (q *Queries) CreateTransactionDetail(ctx context.Context, arg CreateTransactionDetailParams) (TransactionDetail, error) {
	row := q.db.QueryRowContext(ctx, createTransactionDetail,
		arg.IDTransaction,
		arg.Description,
		arg.Quantity,
		arg.UnitValue,
	)
	var i TransactionDetail
	err := row.Scan(
		&i.IDTransactionDetail,
		&i.IDTransaction,
		&i.Description,
		&i.Quantity,
		&i.UnitValue,
		&i.TransactionDetailAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id_transaction = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, idTransaction int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, idTransaction)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id_transaction, id_user, transactions_at, total_value, category, description, is_expense FROM transactions
WHERE id_transaction = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, idTransaction int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, idTransaction)
	var i Transaction
	err := row.Scan(
		&i.IDTransaction,
		&i.IDUser,
		&i.TransactionsAt,
		&i.TotalValue,
		&i.Category,
		&i.Description,
		&i.IsExpense,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id_transaction, id_user, transactions_at, total_value, category, description, is_expense FROM transactions
ORDER BY id_transaction
LIMIT $1
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.IDTransaction,
			&i.IDUser,
			&i.TransactionsAt,
			&i.TotalValue,
			&i.Category,
			&i.Description,
			&i.IsExpense,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET total_value = $2,
  category = $3,
  description = $4,
  is_expense = $5
WHERE id_transaction = $1
RETURNING id_transaction, id_user, transactions_at, total_value, category, description, is_expense
`

type UpdateTransactionParams struct {
	IDTransaction int64  `json:"id_transaction"`
	TotalValue    int64  `json:"total_value"`
	Category      string `json:"category"`
	Description   string `json:"description"`
	IsExpense     bool   `json:"is_expense"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.IDTransaction,
		arg.TotalValue,
		arg.Category,
		arg.Description,
		arg.IsExpense,
	)
	var i Transaction
	err := row.Scan(
		&i.IDTransaction,
		&i.IDUser,
		&i.TransactionsAt,
		&i.TotalValue,
		&i.Category,
		&i.Description,
		&i.IsExpense,
	)
	return i, err
}
